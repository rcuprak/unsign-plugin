/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.rcjava.unsign;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Path;

import org.gradle.internal.impldep.org.apache.commons.io.FileUtils;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.BuildResult;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 *
 * @author Ryan Cuprak
 */
class UnsignPluginPluginFunctionalTest {

    /**
     * Project directory
     */
    private File projectDir;

    /**
     * Directory containing JAR files
     */
    private File jarDir;

    /**
     * Gradle runner
     */
    private GradleRunner gradleRunner;

    /**
     * Sets of the
     */
    @BeforeEach
    public void setup() throws Exception {
        projectDir = Files.createTempDirectory("build").toFile();
        jarDir = Files.createTempDirectory("jars").toFile();
        Files.createDirectories(projectDir.toPath());
        writeString(new File(projectDir, "settings.gradle"), "");
        System.out.println("Path: " + jarDir.getAbsolutePath());
        writeString(new File(projectDir, "build.gradle"),
                "plugins {" +
                        "  id('com.rcjava.unsign')" +
                        "} \n" +
                        "unsign { " +
                        " directory=\""+jarDir.getAbsolutePath()+"\"" +
                        "}");
        gradleRunner = GradleRunner.create();
        gradleRunner.forwardOutput();
        gradleRunner.withPluginClasspath();
        gradleRunner.withArguments("unsign");
        gradleRunner.withProjectDir(projectDir);
    }

    /**
     * Cleans up the temp files
     * @throws Exception - thrown if there are any errors
     */
    @AfterEach
    public void cleanup() throws Exception {
        FileUtils.deleteDirectory(jarDir);
        FileUtils.deleteDirectory(projectDir);
    }

    /**
     * Tests the case where we don't have any jars to remove the signature
     */
    @Test
    void noJars() {
        BuildResult result = gradleRunner.build();
        assertTrue(result.getOutput().contains("Total signatures removed: 0"));
    }

    /**
     * Tests where we have signed JARs we want to unsign
     * @throws Exception - thrown if there is an error
     */
    @Test
    void signedJars() throws Exception {
        InputStream is = UnsignPluginPluginFunctionalTest.class.getResourceAsStream("/self-signed.jar");
        Path signed = jarDir.toPath().resolve("self-signed.jar");
        if(is != null) {
            FileUtils.copyInputStreamToFile(is, signed.toFile());
        } else {
            System.out.println("NOT FOUND!");
        }
        BuildResult result = gradleRunner.build();
        assertTrue(result.getOutput().contains("Total signatures removed: 1"));
    }

    /**
     * Tests where we have JARs that aren't signed
     */
    @Test
    void unsignedJars() throws Exception {
        InputStream is = UnsignPluginPluginFunctionalTest.class.getResourceAsStream("/unsigned.jar");
        Path signed = jarDir.toPath().resolve("self-signed.jar");
        if(is != null) {
            FileUtils.copyInputStreamToFile(is, signed.toFile());
        } else {
            System.out.println("NOT FOUND!");
        }
        BuildResult result = gradleRunner.build();
        assertTrue(result.getOutput().contains("Total signatures removed: 0"));
    }


    private void writeString(File file, String string) throws IOException {
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }
}
